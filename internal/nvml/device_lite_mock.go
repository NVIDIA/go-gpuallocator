// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package nvml

import (
	"sync"
)

// Ensure, that DeviceLiteMock does implement DeviceLite.
// If this is not the case, regenerate this file with moq.
var _ DeviceLite = &DeviceLiteMock{}

// DeviceLiteMock is a mock implementation of DeviceLite.
//
// 	func TestSomethingThatUsesDeviceLite(t *testing.T) {
//
// 		// make and configure a mocked DeviceLite
// 		mockedDeviceLite := &DeviceLiteMock{
// 			CPUAffinityFunc: func() int64 {
// 				panic("mock out the CPUAffinity method")
// 			},
// 			GetAttributesFunc: func() (DeviceAttributes, Return) {
// 				panic("mock out the GetAttributes method")
// 			},
// 			GetComputeInstanceIdFunc: func() (int, Return) {
// 				panic("mock out the GetComputeInstanceId method")
// 			},
// 			GetDeviceHandleFromMigDeviceHandleFunc: func() (Device, Return) {
// 				panic("mock out the GetDeviceHandleFromMigDeviceHandle method")
// 			},
// 			GetGpuInstanceIdFunc: func() (int, Return) {
// 				panic("mock out the GetGpuInstanceId method")
// 			},
// 			GetMaxMigDeviceCountFunc: func() (int, Return) {
// 				panic("mock out the GetMaxMigDeviceCount method")
// 			},
// 			GetMigDeviceHandleByIndexFunc: func(n int) (Device, Return) {
// 				panic("mock out the GetMigDeviceHandleByIndex method")
// 			},
// 			GetMigDevicesFunc: func() ([]DeviceLite, Return) {
// 				panic("mock out the GetMigDevices method")
// 			},
// 			GetMigModeFunc: func() (int, int, Return) {
// 				panic("mock out the GetMigMode method")
// 			},
// 			GetMinorNumberFunc: func() (int, Return) {
// 				panic("mock out the GetMinorNumber method")
// 			},
// 			GetNvLinkRemotePciInfoFunc: func(n int) (PciInfo, Return) {
// 				panic("mock out the GetNvLinkRemotePciInfo method")
// 			},
// 			GetNvLinkStateFunc: func(n int) (EnableState, Return) {
// 				panic("mock out the GetNvLinkState method")
// 			},
// 			GetPciInfoFunc: func() (PciInfo, Return) {
// 				panic("mock out the GetPciInfo method")
// 			},
// 			GetTopologyCommonAncestorFunc: func(device Device) (GpuTopologyLevel, Return) {
// 				panic("mock out the GetTopologyCommonAncestor method")
// 			},
// 			GetUUIDFunc: func() (string, Return) {
// 				panic("mock out the GetUUID method")
// 			},
// 			IsMigEnabledFunc: func() (bool, Return) {
// 				panic("mock out the IsMigEnabled method")
// 			},
// 			PathFunc: func() string {
// 				panic("mock out the Path method")
// 			},
// 			RegisterEventsFunc: func(v uint64, eventSet EventSet) Return {
// 				panic("mock out the RegisterEvents method")
// 			},
// 		}
//
// 		// use mockedDeviceLite in code that requires DeviceLite
// 		// and then make assertions.
//
// 	}
type DeviceLiteMock struct {
	// CPUAffinityFunc mocks the CPUAffinity method.
	CPUAffinityFunc func() int64

	// GetAttributesFunc mocks the GetAttributes method.
	GetAttributesFunc func() (DeviceAttributes, Return)

	// GetComputeInstanceIdFunc mocks the GetComputeInstanceId method.
	GetComputeInstanceIdFunc func() (int, Return)

	// GetDeviceHandleFromMigDeviceHandleFunc mocks the GetDeviceHandleFromMigDeviceHandle method.
	GetDeviceHandleFromMigDeviceHandleFunc func() (Device, Return)

	// GetGpuInstanceIdFunc mocks the GetGpuInstanceId method.
	GetGpuInstanceIdFunc func() (int, Return)

	// GetMaxMigDeviceCountFunc mocks the GetMaxMigDeviceCount method.
	GetMaxMigDeviceCountFunc func() (int, Return)

	// GetMigDeviceHandleByIndexFunc mocks the GetMigDeviceHandleByIndex method.
	GetMigDeviceHandleByIndexFunc func(n int) (Device, Return)

	// GetMigDevicesFunc mocks the GetMigDevices method.
	GetMigDevicesFunc func() ([]DeviceLite, Return)

	// GetMigModeFunc mocks the GetMigMode method.
	GetMigModeFunc func() (int, int, Return)

	// GetMinorNumberFunc mocks the GetMinorNumber method.
	GetMinorNumberFunc func() (int, Return)

	// GetNvLinkRemotePciInfoFunc mocks the GetNvLinkRemotePciInfo method.
	GetNvLinkRemotePciInfoFunc func(n int) (PciInfo, Return)

	// GetNvLinkStateFunc mocks the GetNvLinkState method.
	GetNvLinkStateFunc func(n int) (EnableState, Return)

	// GetPciInfoFunc mocks the GetPciInfo method.
	GetPciInfoFunc func() (PciInfo, Return)

	// GetTopologyCommonAncestorFunc mocks the GetTopologyCommonAncestor method.
	GetTopologyCommonAncestorFunc func(device Device) (GpuTopologyLevel, Return)

	// GetUUIDFunc mocks the GetUUID method.
	GetUUIDFunc func() (string, Return)

	// IsMigEnabledFunc mocks the IsMigEnabled method.
	IsMigEnabledFunc func() (bool, Return)

	// PathFunc mocks the Path method.
	PathFunc func() string

	// RegisterEventsFunc mocks the RegisterEvents method.
	RegisterEventsFunc func(v uint64, eventSet EventSet) Return

	// calls tracks calls to the methods.
	calls struct {
		// CPUAffinity holds details about calls to the CPUAffinity method.
		CPUAffinity []struct {
		}
		// GetAttributes holds details about calls to the GetAttributes method.
		GetAttributes []struct {
		}
		// GetComputeInstanceId holds details about calls to the GetComputeInstanceId method.
		GetComputeInstanceId []struct {
		}
		// GetDeviceHandleFromMigDeviceHandle holds details about calls to the GetDeviceHandleFromMigDeviceHandle method.
		GetDeviceHandleFromMigDeviceHandle []struct {
		}
		// GetGpuInstanceId holds details about calls to the GetGpuInstanceId method.
		GetGpuInstanceId []struct {
		}
		// GetMaxMigDeviceCount holds details about calls to the GetMaxMigDeviceCount method.
		GetMaxMigDeviceCount []struct {
		}
		// GetMigDeviceHandleByIndex holds details about calls to the GetMigDeviceHandleByIndex method.
		GetMigDeviceHandleByIndex []struct {
			// N is the n argument value.
			N int
		}
		// GetMigDevices holds details about calls to the GetMigDevices method.
		GetMigDevices []struct {
		}
		// GetMigMode holds details about calls to the GetMigMode method.
		GetMigMode []struct {
		}
		// GetMinorNumber holds details about calls to the GetMinorNumber method.
		GetMinorNumber []struct {
		}
		// GetNvLinkRemotePciInfo holds details about calls to the GetNvLinkRemotePciInfo method.
		GetNvLinkRemotePciInfo []struct {
			// N is the n argument value.
			N int
		}
		// GetNvLinkState holds details about calls to the GetNvLinkState method.
		GetNvLinkState []struct {
			// N is the n argument value.
			N int
		}
		// GetPciInfo holds details about calls to the GetPciInfo method.
		GetPciInfo []struct {
		}
		// GetTopologyCommonAncestor holds details about calls to the GetTopologyCommonAncestor method.
		GetTopologyCommonAncestor []struct {
			// Device is the device argument value.
			Device Device
		}
		// GetUUID holds details about calls to the GetUUID method.
		GetUUID []struct {
		}
		// IsMigEnabled holds details about calls to the IsMigEnabled method.
		IsMigEnabled []struct {
		}
		// Path holds details about calls to the Path method.
		Path []struct {
		}
		// RegisterEvents holds details about calls to the RegisterEvents method.
		RegisterEvents []struct {
			// V is the v argument value.
			V uint64
			// EventSet is the eventSet argument value.
			EventSet EventSet
		}
	}
	lockCPUAffinity                        sync.RWMutex
	lockGetAttributes                      sync.RWMutex
	lockGetComputeInstanceId               sync.RWMutex
	lockGetDeviceHandleFromMigDeviceHandle sync.RWMutex
	lockGetGpuInstanceId                   sync.RWMutex
	lockGetMaxMigDeviceCount               sync.RWMutex
	lockGetMigDeviceHandleByIndex          sync.RWMutex
	lockGetMigDevices                      sync.RWMutex
	lockGetMigMode                         sync.RWMutex
	lockGetMinorNumber                     sync.RWMutex
	lockGetNvLinkRemotePciInfo             sync.RWMutex
	lockGetNvLinkState                     sync.RWMutex
	lockGetPciInfo                         sync.RWMutex
	lockGetTopologyCommonAncestor          sync.RWMutex
	lockGetUUID                            sync.RWMutex
	lockIsMigEnabled                       sync.RWMutex
	lockPath                               sync.RWMutex
	lockRegisterEvents                     sync.RWMutex
}

// CPUAffinity calls CPUAffinityFunc.
func (mock *DeviceLiteMock) CPUAffinity() int64 {
	if mock.CPUAffinityFunc == nil {
		panic("DeviceLiteMock.CPUAffinityFunc: method is nil but DeviceLite.CPUAffinity was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCPUAffinity.Lock()
	mock.calls.CPUAffinity = append(mock.calls.CPUAffinity, callInfo)
	mock.lockCPUAffinity.Unlock()
	return mock.CPUAffinityFunc()
}

// CPUAffinityCalls gets all the calls that were made to CPUAffinity.
// Check the length with:
//     len(mockedDeviceLite.CPUAffinityCalls())
func (mock *DeviceLiteMock) CPUAffinityCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCPUAffinity.RLock()
	calls = mock.calls.CPUAffinity
	mock.lockCPUAffinity.RUnlock()
	return calls
}

// GetAttributes calls GetAttributesFunc.
func (mock *DeviceLiteMock) GetAttributes() (DeviceAttributes, Return) {
	if mock.GetAttributesFunc == nil {
		panic("DeviceLiteMock.GetAttributesFunc: method is nil but DeviceLite.GetAttributes was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAttributes.Lock()
	mock.calls.GetAttributes = append(mock.calls.GetAttributes, callInfo)
	mock.lockGetAttributes.Unlock()
	return mock.GetAttributesFunc()
}

// GetAttributesCalls gets all the calls that were made to GetAttributes.
// Check the length with:
//     len(mockedDeviceLite.GetAttributesCalls())
func (mock *DeviceLiteMock) GetAttributesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAttributes.RLock()
	calls = mock.calls.GetAttributes
	mock.lockGetAttributes.RUnlock()
	return calls
}

// GetComputeInstanceId calls GetComputeInstanceIdFunc.
func (mock *DeviceLiteMock) GetComputeInstanceId() (int, Return) {
	if mock.GetComputeInstanceIdFunc == nil {
		panic("DeviceLiteMock.GetComputeInstanceIdFunc: method is nil but DeviceLite.GetComputeInstanceId was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetComputeInstanceId.Lock()
	mock.calls.GetComputeInstanceId = append(mock.calls.GetComputeInstanceId, callInfo)
	mock.lockGetComputeInstanceId.Unlock()
	return mock.GetComputeInstanceIdFunc()
}

// GetComputeInstanceIdCalls gets all the calls that were made to GetComputeInstanceId.
// Check the length with:
//     len(mockedDeviceLite.GetComputeInstanceIdCalls())
func (mock *DeviceLiteMock) GetComputeInstanceIdCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetComputeInstanceId.RLock()
	calls = mock.calls.GetComputeInstanceId
	mock.lockGetComputeInstanceId.RUnlock()
	return calls
}

// GetDeviceHandleFromMigDeviceHandle calls GetDeviceHandleFromMigDeviceHandleFunc.
func (mock *DeviceLiteMock) GetDeviceHandleFromMigDeviceHandle() (Device, Return) {
	if mock.GetDeviceHandleFromMigDeviceHandleFunc == nil {
		panic("DeviceLiteMock.GetDeviceHandleFromMigDeviceHandleFunc: method is nil but DeviceLite.GetDeviceHandleFromMigDeviceHandle was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDeviceHandleFromMigDeviceHandle.Lock()
	mock.calls.GetDeviceHandleFromMigDeviceHandle = append(mock.calls.GetDeviceHandleFromMigDeviceHandle, callInfo)
	mock.lockGetDeviceHandleFromMigDeviceHandle.Unlock()
	return mock.GetDeviceHandleFromMigDeviceHandleFunc()
}

// GetDeviceHandleFromMigDeviceHandleCalls gets all the calls that were made to GetDeviceHandleFromMigDeviceHandle.
// Check the length with:
//     len(mockedDeviceLite.GetDeviceHandleFromMigDeviceHandleCalls())
func (mock *DeviceLiteMock) GetDeviceHandleFromMigDeviceHandleCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDeviceHandleFromMigDeviceHandle.RLock()
	calls = mock.calls.GetDeviceHandleFromMigDeviceHandle
	mock.lockGetDeviceHandleFromMigDeviceHandle.RUnlock()
	return calls
}

// GetGpuInstanceId calls GetGpuInstanceIdFunc.
func (mock *DeviceLiteMock) GetGpuInstanceId() (int, Return) {
	if mock.GetGpuInstanceIdFunc == nil {
		panic("DeviceLiteMock.GetGpuInstanceIdFunc: method is nil but DeviceLite.GetGpuInstanceId was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetGpuInstanceId.Lock()
	mock.calls.GetGpuInstanceId = append(mock.calls.GetGpuInstanceId, callInfo)
	mock.lockGetGpuInstanceId.Unlock()
	return mock.GetGpuInstanceIdFunc()
}

// GetGpuInstanceIdCalls gets all the calls that were made to GetGpuInstanceId.
// Check the length with:
//     len(mockedDeviceLite.GetGpuInstanceIdCalls())
func (mock *DeviceLiteMock) GetGpuInstanceIdCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetGpuInstanceId.RLock()
	calls = mock.calls.GetGpuInstanceId
	mock.lockGetGpuInstanceId.RUnlock()
	return calls
}

// GetMaxMigDeviceCount calls GetMaxMigDeviceCountFunc.
func (mock *DeviceLiteMock) GetMaxMigDeviceCount() (int, Return) {
	if mock.GetMaxMigDeviceCountFunc == nil {
		panic("DeviceLiteMock.GetMaxMigDeviceCountFunc: method is nil but DeviceLite.GetMaxMigDeviceCount was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMaxMigDeviceCount.Lock()
	mock.calls.GetMaxMigDeviceCount = append(mock.calls.GetMaxMigDeviceCount, callInfo)
	mock.lockGetMaxMigDeviceCount.Unlock()
	return mock.GetMaxMigDeviceCountFunc()
}

// GetMaxMigDeviceCountCalls gets all the calls that were made to GetMaxMigDeviceCount.
// Check the length with:
//     len(mockedDeviceLite.GetMaxMigDeviceCountCalls())
func (mock *DeviceLiteMock) GetMaxMigDeviceCountCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMaxMigDeviceCount.RLock()
	calls = mock.calls.GetMaxMigDeviceCount
	mock.lockGetMaxMigDeviceCount.RUnlock()
	return calls
}

// GetMigDeviceHandleByIndex calls GetMigDeviceHandleByIndexFunc.
func (mock *DeviceLiteMock) GetMigDeviceHandleByIndex(n int) (Device, Return) {
	if mock.GetMigDeviceHandleByIndexFunc == nil {
		panic("DeviceLiteMock.GetMigDeviceHandleByIndexFunc: method is nil but DeviceLite.GetMigDeviceHandleByIndex was just called")
	}
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockGetMigDeviceHandleByIndex.Lock()
	mock.calls.GetMigDeviceHandleByIndex = append(mock.calls.GetMigDeviceHandleByIndex, callInfo)
	mock.lockGetMigDeviceHandleByIndex.Unlock()
	return mock.GetMigDeviceHandleByIndexFunc(n)
}

// GetMigDeviceHandleByIndexCalls gets all the calls that were made to GetMigDeviceHandleByIndex.
// Check the length with:
//     len(mockedDeviceLite.GetMigDeviceHandleByIndexCalls())
func (mock *DeviceLiteMock) GetMigDeviceHandleByIndexCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockGetMigDeviceHandleByIndex.RLock()
	calls = mock.calls.GetMigDeviceHandleByIndex
	mock.lockGetMigDeviceHandleByIndex.RUnlock()
	return calls
}

// GetMigDevices calls GetMigDevicesFunc.
func (mock *DeviceLiteMock) GetMigDevices() ([]DeviceLite, Return) {
	if mock.GetMigDevicesFunc == nil {
		panic("DeviceLiteMock.GetMigDevicesFunc: method is nil but DeviceLite.GetMigDevices was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMigDevices.Lock()
	mock.calls.GetMigDevices = append(mock.calls.GetMigDevices, callInfo)
	mock.lockGetMigDevices.Unlock()
	return mock.GetMigDevicesFunc()
}

// GetMigDevicesCalls gets all the calls that were made to GetMigDevices.
// Check the length with:
//     len(mockedDeviceLite.GetMigDevicesCalls())
func (mock *DeviceLiteMock) GetMigDevicesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMigDevices.RLock()
	calls = mock.calls.GetMigDevices
	mock.lockGetMigDevices.RUnlock()
	return calls
}

// GetMigMode calls GetMigModeFunc.
func (mock *DeviceLiteMock) GetMigMode() (int, int, Return) {
	if mock.GetMigModeFunc == nil {
		panic("DeviceLiteMock.GetMigModeFunc: method is nil but DeviceLite.GetMigMode was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMigMode.Lock()
	mock.calls.GetMigMode = append(mock.calls.GetMigMode, callInfo)
	mock.lockGetMigMode.Unlock()
	return mock.GetMigModeFunc()
}

// GetMigModeCalls gets all the calls that were made to GetMigMode.
// Check the length with:
//     len(mockedDeviceLite.GetMigModeCalls())
func (mock *DeviceLiteMock) GetMigModeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMigMode.RLock()
	calls = mock.calls.GetMigMode
	mock.lockGetMigMode.RUnlock()
	return calls
}

// GetMinorNumber calls GetMinorNumberFunc.
func (mock *DeviceLiteMock) GetMinorNumber() (int, Return) {
	if mock.GetMinorNumberFunc == nil {
		panic("DeviceLiteMock.GetMinorNumberFunc: method is nil but DeviceLite.GetMinorNumber was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetMinorNumber.Lock()
	mock.calls.GetMinorNumber = append(mock.calls.GetMinorNumber, callInfo)
	mock.lockGetMinorNumber.Unlock()
	return mock.GetMinorNumberFunc()
}

// GetMinorNumberCalls gets all the calls that were made to GetMinorNumber.
// Check the length with:
//     len(mockedDeviceLite.GetMinorNumberCalls())
func (mock *DeviceLiteMock) GetMinorNumberCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetMinorNumber.RLock()
	calls = mock.calls.GetMinorNumber
	mock.lockGetMinorNumber.RUnlock()
	return calls
}

// GetNvLinkRemotePciInfo calls GetNvLinkRemotePciInfoFunc.
func (mock *DeviceLiteMock) GetNvLinkRemotePciInfo(n int) (PciInfo, Return) {
	if mock.GetNvLinkRemotePciInfoFunc == nil {
		panic("DeviceLiteMock.GetNvLinkRemotePciInfoFunc: method is nil but DeviceLite.GetNvLinkRemotePciInfo was just called")
	}
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockGetNvLinkRemotePciInfo.Lock()
	mock.calls.GetNvLinkRemotePciInfo = append(mock.calls.GetNvLinkRemotePciInfo, callInfo)
	mock.lockGetNvLinkRemotePciInfo.Unlock()
	return mock.GetNvLinkRemotePciInfoFunc(n)
}

// GetNvLinkRemotePciInfoCalls gets all the calls that were made to GetNvLinkRemotePciInfo.
// Check the length with:
//     len(mockedDeviceLite.GetNvLinkRemotePciInfoCalls())
func (mock *DeviceLiteMock) GetNvLinkRemotePciInfoCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockGetNvLinkRemotePciInfo.RLock()
	calls = mock.calls.GetNvLinkRemotePciInfo
	mock.lockGetNvLinkRemotePciInfo.RUnlock()
	return calls
}

// GetNvLinkState calls GetNvLinkStateFunc.
func (mock *DeviceLiteMock) GetNvLinkState(n int) (EnableState, Return) {
	if mock.GetNvLinkStateFunc == nil {
		panic("DeviceLiteMock.GetNvLinkStateFunc: method is nil but DeviceLite.GetNvLinkState was just called")
	}
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockGetNvLinkState.Lock()
	mock.calls.GetNvLinkState = append(mock.calls.GetNvLinkState, callInfo)
	mock.lockGetNvLinkState.Unlock()
	return mock.GetNvLinkStateFunc(n)
}

// GetNvLinkStateCalls gets all the calls that were made to GetNvLinkState.
// Check the length with:
//     len(mockedDeviceLite.GetNvLinkStateCalls())
func (mock *DeviceLiteMock) GetNvLinkStateCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockGetNvLinkState.RLock()
	calls = mock.calls.GetNvLinkState
	mock.lockGetNvLinkState.RUnlock()
	return calls
}

// GetPciInfo calls GetPciInfoFunc.
func (mock *DeviceLiteMock) GetPciInfo() (PciInfo, Return) {
	if mock.GetPciInfoFunc == nil {
		panic("DeviceLiteMock.GetPciInfoFunc: method is nil but DeviceLite.GetPciInfo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetPciInfo.Lock()
	mock.calls.GetPciInfo = append(mock.calls.GetPciInfo, callInfo)
	mock.lockGetPciInfo.Unlock()
	return mock.GetPciInfoFunc()
}

// GetPciInfoCalls gets all the calls that were made to GetPciInfo.
// Check the length with:
//     len(mockedDeviceLite.GetPciInfoCalls())
func (mock *DeviceLiteMock) GetPciInfoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetPciInfo.RLock()
	calls = mock.calls.GetPciInfo
	mock.lockGetPciInfo.RUnlock()
	return calls
}

// GetTopologyCommonAncestor calls GetTopologyCommonAncestorFunc.
func (mock *DeviceLiteMock) GetTopologyCommonAncestor(device Device) (GpuTopologyLevel, Return) {
	if mock.GetTopologyCommonAncestorFunc == nil {
		panic("DeviceLiteMock.GetTopologyCommonAncestorFunc: method is nil but DeviceLite.GetTopologyCommonAncestor was just called")
	}
	callInfo := struct {
		Device Device
	}{
		Device: device,
	}
	mock.lockGetTopologyCommonAncestor.Lock()
	mock.calls.GetTopologyCommonAncestor = append(mock.calls.GetTopologyCommonAncestor, callInfo)
	mock.lockGetTopologyCommonAncestor.Unlock()
	return mock.GetTopologyCommonAncestorFunc(device)
}

// GetTopologyCommonAncestorCalls gets all the calls that were made to GetTopologyCommonAncestor.
// Check the length with:
//     len(mockedDeviceLite.GetTopologyCommonAncestorCalls())
func (mock *DeviceLiteMock) GetTopologyCommonAncestorCalls() []struct {
	Device Device
} {
	var calls []struct {
		Device Device
	}
	mock.lockGetTopologyCommonAncestor.RLock()
	calls = mock.calls.GetTopologyCommonAncestor
	mock.lockGetTopologyCommonAncestor.RUnlock()
	return calls
}

// GetUUID calls GetUUIDFunc.
func (mock *DeviceLiteMock) GetUUID() (string, Return) {
	if mock.GetUUIDFunc == nil {
		panic("DeviceLiteMock.GetUUIDFunc: method is nil but DeviceLite.GetUUID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUUID.Lock()
	mock.calls.GetUUID = append(mock.calls.GetUUID, callInfo)
	mock.lockGetUUID.Unlock()
	return mock.GetUUIDFunc()
}

// GetUUIDCalls gets all the calls that were made to GetUUID.
// Check the length with:
//     len(mockedDeviceLite.GetUUIDCalls())
func (mock *DeviceLiteMock) GetUUIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUUID.RLock()
	calls = mock.calls.GetUUID
	mock.lockGetUUID.RUnlock()
	return calls
}

// IsMigEnabled calls IsMigEnabledFunc.
func (mock *DeviceLiteMock) IsMigEnabled() (bool, Return) {
	if mock.IsMigEnabledFunc == nil {
		panic("DeviceLiteMock.IsMigEnabledFunc: method is nil but DeviceLite.IsMigEnabled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsMigEnabled.Lock()
	mock.calls.IsMigEnabled = append(mock.calls.IsMigEnabled, callInfo)
	mock.lockIsMigEnabled.Unlock()
	return mock.IsMigEnabledFunc()
}

// IsMigEnabledCalls gets all the calls that were made to IsMigEnabled.
// Check the length with:
//     len(mockedDeviceLite.IsMigEnabledCalls())
func (mock *DeviceLiteMock) IsMigEnabledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsMigEnabled.RLock()
	calls = mock.calls.IsMigEnabled
	mock.lockIsMigEnabled.RUnlock()
	return calls
}

// Path calls PathFunc.
func (mock *DeviceLiteMock) Path() string {
	if mock.PathFunc == nil {
		panic("DeviceLiteMock.PathFunc: method is nil but DeviceLite.Path was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPath.Lock()
	mock.calls.Path = append(mock.calls.Path, callInfo)
	mock.lockPath.Unlock()
	return mock.PathFunc()
}

// PathCalls gets all the calls that were made to Path.
// Check the length with:
//     len(mockedDeviceLite.PathCalls())
func (mock *DeviceLiteMock) PathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPath.RLock()
	calls = mock.calls.Path
	mock.lockPath.RUnlock()
	return calls
}

// RegisterEvents calls RegisterEventsFunc.
func (mock *DeviceLiteMock) RegisterEvents(v uint64, eventSet EventSet) Return {
	if mock.RegisterEventsFunc == nil {
		panic("DeviceLiteMock.RegisterEventsFunc: method is nil but DeviceLite.RegisterEvents was just called")
	}
	callInfo := struct {
		V        uint64
		EventSet EventSet
	}{
		V:        v,
		EventSet: eventSet,
	}
	mock.lockRegisterEvents.Lock()
	mock.calls.RegisterEvents = append(mock.calls.RegisterEvents, callInfo)
	mock.lockRegisterEvents.Unlock()
	return mock.RegisterEventsFunc(v, eventSet)
}

// RegisterEventsCalls gets all the calls that were made to RegisterEvents.
// Check the length with:
//     len(mockedDeviceLite.RegisterEventsCalls())
func (mock *DeviceLiteMock) RegisterEventsCalls() []struct {
	V        uint64
	EventSet EventSet
} {
	var calls []struct {
		V        uint64
		EventSet EventSet
	}
	mock.lockRegisterEvents.RLock()
	calls = mock.calls.RegisterEvents
	mock.lockRegisterEvents.RUnlock()
	return calls
}
